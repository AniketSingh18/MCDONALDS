import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv(r'D:\downloadss\mcdonalds.csv')
df['Gender'].value_counts()
df['VisitFrequency'].value_counts()
df['Like'].value_counts()
labels = ['Female', 'Male']
size = df['Gender'].value_counts()
colors = ['orange', 'blue']
explode = [0, 0.1]
plt.rcParams['figure.figsize'] = (7, 7)
plt.pie(size, colors=colors, explode=explode, labels=labels, shadow=True, autopct='%.2f%%')
plt.title('Gender', fontsize=20)
plt.axis('off')
plt.legend()
plt.show()
plt.figure(figsize=(15, 6))
a = sns.countplot(x=df['Age'])
plt.title('Age based segmentation', fontsize=15)
df['Like'] = df['Like'].replace({'I hate it!-5': '-5', 'I love it!+5': '+5'})

sns.barplot(x='Like', y='Age', data=df)
plt.title('Ratings of Mcdonald')
from sklearn.preprocessing import LabelEncoder
df_cat = df.iloc[:, 0:11]
df_cat
def labelling(x):
    df[x] = LabelEncoder().fit_transform(df[x])
    return df
df_cat = df.iloc[:, 0:11]
for i in df_cat:
    labelling(i)
df
plt.rcParams['figure.figsize'] = (12, 14)
df.hist()
plt.show()
x = df_cat.values
x
round(df.iloc[:, 0:11].mean(), 2)

from sklearn.decomposition import PCA
from sklearn import preprocessing
pca_data = preprocessing.scale(x)
pca = PCA(n_components=11)
pc = pca.fit_transform(x)
names = ['pc1', 'pc2', 'pc3', 'pc4', 'pc5', 'pc6', 'pc7', 'pc8', 'pc9', 'pc10', 'pc11']
pf = pd.DataFrame(data=pc, columns=names)
pf
pf.head()
pf.describe()
pca.explained_variance_ratio_
np.cumsum(pca.explained_variance_ratio_)
loadings = pca.components_
num_pc = pca.n_features_
pc_list = ["PC" + str(i) for i in list(range(1, num_pc + 1))]
loadings_df = pd.DataFrame.from_dict(dict(zip(pc_list, loadings)))
loadings_df['variable'] = df_cat.columns.values
loadings_df = loadings_df.set_index('variable')
loadings_df
plt.rcParams['figure.figsize'] = (20, 15)
ax = sns.heatmap(loadings_df, annot=True, cmap='inferno')
plt.show()
from bioinfokit.visuz import cluster
cluster.screeplot(obj=[pc_list, pca.explained_variance_ratio_], show=True, dim=(10, 5))
pca_scores = PCA().fit_transform(x)
cluster.biplot(cscore=pca_scores, loadings=loadings, labels=df.columns.values,
               var1=round(pca.explained_variance_ratio_[0] * 100, 2),
               var2=round(pca.explained_variance_ratio_[1] * 100, 2), show=True, dim=(10, 5))
get_ipython().system('pip install yellowbrick')
from sklearn.utils.metaestimators import available_if
from sklearn.cluster import KMeans
from yellowbrick.cluster import KElbowVisualizer
model = KMeans()
visualizer = KElbowVisualizer(model, k=(1, 12)).fit(df_cat)
visualizer.show()
kmeans = KMeans(n_clusters=4, init='k-means++', random_state=0).fit(df_cat)
df['cluster_num'] = kmeans.labels_  
print(kmeans.labels_) 
print(kmeans.inertia_)  
print(kmeans.n_iter_)  
print(kmeans.cluster_centers_)  
from collections import Counter
Counter(kmeans.labels_)
sns.scatterplot(data=pf, x="pc1", y="pc2", hue=kmeans.labels_)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1],
            marker="X", c="r", s=80, label="centroids")
plt.legend()
plt.show()
from scipy.cluster.hierarchy import linkage, dendrogram
merg = linkage(df_cat, method='ward')
plt.rcParams['figure.figsize'] = (7, 5)
dendrogram(merg, leaf_rotation=90)
plt.xlabel("data points", fontsize=15)
plt.ylabel("euclidean distance", fontsize=15)
plt.show()

from statsmodels.graphics.mosaicplot import mosaic
from itertools import product

crosstab = pd.crosstab(df['cluster_num'], df['Like'])

crosstab = crosstab[['-5', '-4', '-3', '-2', '-1', '0', '+1', '+2', '+3', '+4', '+5']]
crosstab
plt.rcParams['figure.figsize'] = (7, 5)
mosaic(crosstab.stack())
plt.show()

crosstab_gender = pd.crosstab(df['cluster_num'], df['Gender'])
crosstab_gender
plt.rcParams['figure.figsize'] = (7, 5)
mosaic(crosstab_gender.stack())
plt.show()
sns.boxplot(x="cluster_num", y="Age", data=df)
df['VisitFrequency'] = LabelEncoder().fit_transform(df['VisitFrequency'])
visit = df.groupby('cluster_num')['VisitFrequency'].mean()
visit = visit.to_frame().reset_index()
visit

df['Like'] = LabelEncoder().fit_transform(df['Like'])
Like = df.groupby('cluster_num')['Like'].mean()
Like = Like.to_frame().reset_index()
Like


df['Gender'] = LabelEncoder().fit_transform(df['Gender'])
Gender = df.groupby('cluster_num')['Gender'].mean()
Gender = Gender.to_frame().reset_index()
Gender
segment = Gender.merge(Like, on='cluster_num', how='left').merge(visit, on='cluster_num', how='left')
segment
plt.figure(figsize=(9, 4))
sns.scatterplot(x="VisitFrequency", y="Like", data=segment, s=400, color="r")
plt.title("Simple segment evaluation plot for the fast food data set",
          fontsize=15)
plt.xlabel("Visit", fontsize=12)
plt.ylabel("Like", fontsize=12)
plt.show()





